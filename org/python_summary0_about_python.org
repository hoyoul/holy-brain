:PROPERTIES:
:ID:       34677CFF-DC91-4D20-A7DA-F3242B97715B
:mtime:    20230615095858 20230614094849 20230614080942 20230613230310 20230613170157 20230613083436
:ctime:    20230613083436
:END:
#+title: python_summary0-About Python
#+AUTHOR: holy
#+EMAIL: hoyoul.park@gmail.com
#+DATE: <2023-06-13 Tue>
#+DESCRIPTION: python이란 무엇인가? python의 개념과 설정
#+HUGO_DRAFT: true

* programming이란
** 절차지향 언어 & 함수형언어 
초창기 programming은 computer가 가진 계산능력을 사용하는데 focus를
두었다. 엄청나게 많은 data를 program에 입력하면, 함수를 이용해 간단히
처리할 수 있다. 이것이 program을 사용하는 이유이자 각광받은
이유다. 그래서 초창기 언어들은 현실세계의 data를 programming 세계의
data로 변환하고 그 대량의 data를 함수를 사용해서 간단히
해결했다. 인간이 하면 오랜 시간이 걸릴 수 있는 데이터 처리를 너무나도
간단하게 해결했다. [[file:python_summary2_assignment_and_variables.org][여기에서 bit operator에 예제]]를 살펴봐라.

절차지향 언어와 함수형 언어는 모두 함수의 강력한 힘을 사용한다.
인간이 하지 못하는 대용량의 데이터 처리와 많은 계산들을 가능하게
해준다. 절차지향언어와 functional language로 나누어진건 절차지향의
언어는 속도를 위해서 computer라는 전자기 device에 맞춰서 만들어졌고,
functional language는 인간의 생각, 수학적 방식을 그대로 사용하게
만들어졌다. focus하는 대상이 다른것이다.

** 객체지향 언어
그런데 현실세계의 data를 단순한 programming 내의 data로 변환할 수
있다라고 간단히 얘기하기엔 현실 세계의 data는 매우 복잡하다. 단순한
숫자,문자,비트로 표현하기에는 한계가 있다. 그래서 현실의 data와
비슷하게 structure이라는 구조화된 data가 나왔고, 여기서 진화해서
구조화된 data를 처리하는, 즉, 구조에 맞춰 처리하는 method가
생겼다. 이런 형태는 class형태로 만들어진다. class를 사용하는
programming언어를 oop라고 했다. oop에선 세상의 모든것은 객체로 표현될
수 있다는 철학을 가지고 있다.  세상의 모든것을 객체로 표현한다는 것은
세상을 simulation할 수 있다는 말이다. 그리고 세상을 simulation하면,
세상의 모든 문제를 해결하는데 programming언어를 사용할 수 있다는
것이다. 세상의 모든 문제는 대용량의 data를 어떻게 처리하느냐?만 있는
것이 아니다. 인간이 어려워 하는 대용량 데이터의 계산 문제뿐 아니라
모든 형태의 문제를 simulation해서 해결하는데 사용 될 수 있다는 것이다.

* python이란?
python은 함수형언어가 아니라, =객체 지향 언어= 다. python은 모든 것을
객체로 바라본다. 따라서 우리도, python 코드의 모든것을 객체로
생각하고, 객체로 해석해야 한다.

* python의 개발 환경
python을 사용하려면 setting이 필요하다. computer에 전원을 넣고 바로
python 코드를 작성하고 실행하는 그림을 상상하지 말자. 코딩하는 방법은
여러가지다. 코딩할 수 있는 다양한 editor가 존재하고, 그 많은
editor에서 선택을 해야한다. 나는 emacs를 선택했다. emacs를 선택해서
끝나는게 아니다. 다양한 방법이 존재한다. elpy를 사용해서 코딩할수도
있고, lsp로 코딩할수도 있고, jupyter notebook으로 코딩할수도 있고,
google colab과 연결해서 사용할 수도 있다. 짜증나지만, 많은 방법이
있다. 여튼 중요한건 난 emacs를 사용한다는 것이고 emacs를
사용한다는 것은, =everything is possbile= 이다. 한계는 없다.

** emacs 설정
python code를 작성하는 editor로 emacs를 사용한다. emacs에서 python을
작성하기위한 setting이 필요하다. lsp를 사용해서 속시원하게 사용하는게
추천되지만, 나는 2014년 맥북 사용자다. 분수에 맞게 코딩을 하자.
jupyter notebook이나 google colab을 사용해서 ipython
interpreter(kernel)을 이용하려면 다음 [[file:emacs_jupyter_noteboo_settings.org][설정을]] 참고하자. anaconda로
작성하려면 [[file:emacs_anaconda_settings.org][여기(from here)]]를 참조한다. 그래도 지금 대세인 lsp를
사용하겠다고 한다면 [[file:emacs_python_lsp_setting.org][여기(from here)]]을 참조해라.

* python으로 프로그램 짜는법
일상생활의 문제들을 python으로 해결할 때 고려해야 할게
있다. 함수형으로 문제를 해결할 것인가? 아니면 oop로 문제를 해결할
것인가?인데, 이것은 문제를 보면 감이 잡힌다. 문제의 data를
확인해보자. 우리가 계산하려고 하는 data가 primitive data로 표현이
가능할 경우와 그렇지 않고 data를 구조화해야(simulate) 할지를 확인하자.
예를 들어서 30명의 고객들이 있고 고객들이 가진 은행계좌가 3개가
있고,각각의 고객들이 가진 재산을 합산해서 보여줘라 같은 문제의 경우
oop형태로 만들 필요가 없다. 여기서 data는 고객들의 은행계좌에 있는
돈들이고 그 돈들의 합이기 때문에, primitive data로 표현이 되기
때문이다. 그런데 고객과 은행계좌를 객체로 만들고 고객의 이름, 고객의
나이, 은행의 이름, 은행의 위치같은 모든 정보가 필요한 경우가 있을 수
있다. 은행과 고객의 정보를 출력한다던지...이런 경우는 data를 객체로
simulate해야 한다. 그래서 oop로 짜야 한다. coding test에서 다루는
문제들은 대부분 oop문제가 아니다. primitive한 데이터 처리고, 이를
어떻게 효율적으로 처리하냐?는 알고리즘 문제이기 때문이다.
