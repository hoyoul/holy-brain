:PROPERTIES:
:ID:       CB0EDF70-0400-4054-835A-8D66A1F3884D
:mtime:    20230730074221 20230730021730 20230730000246 20230729225305
:ctime:    20230729225305
:END:
#+title: [node] npm and node
#+AUTHOR: holy
#+EMAIL: hoyoul.park@gmail.com
#+DATE: <2023-07-29 Sat>
#+DESCRIPTION: node의 간략한 사용법
#+HUGO_DRAFT: true
* node
node는 javascript interpreter로 봐도 된다. python 파일을 실행시키기
위해서 python interpreter가 있듯이 또 ruby를 실행시키기 위해서
ruby가 있는것과 비슷하다. 위 3가지 언어는 비슷하다.
* npm
npm은 package관리자다. ruby에 gem이 있듯이, python에 pip가 있듯이
package를 설치하는 것은 동일하다. 하지만 package를 위한 project의
구조와 package의 의존성을 관리하는 방식, package를 배포하는 방식도
다르다. 여기서는 단순히 몇가지 명령어를 알아보자.
** npm init -y
project를 위해서 폴더를 만들고, 폴더안에서 package init을 하면
package.json이 만들어진다. 이것이 현재 project가 의존하는 package를
나타내고 배포가 되었을때도 참조하는 package를 설치할 수 있게
해준다. package.json에는 entry point라고 해서 시작점에 해당하는 js를
기술하게 한다.
** npm install
가장 많이 사용되는 명령어라고 할 수 있다. package를 설치하는
명령어다. project에서 npm install이라고 하면, package.json에 의존성
package를 모두 node_modules라는 폴더에 설치한다. npm install
[package명]은 특정한 package를 설치하고 package.json에 기록한다. pip
install과 같은거라고 보면 된다. pip install로 package를 설치한다고
해서 requirement.txt에 기술이 되지 않는데, 어떻게 보면 npm이 project의
제작과 배포에 더 편리하다고 볼 수 있다.
*** npm install --save [package명]
package.json에 기록된다. --save는 최신버전에서는 default이기 때문에
npm install package와 같다.  이렇게 기록되면 나중에 배포해서 npm
install할때 한큐에 설치할 수 있다.
*** npm install --save-dev [package]
이것은 현재 설치는 하지만, 개발할때만 사용한다.
*** npm uninstall [pacckage]
package를 uninstall한다.
*** npm run
package.json에 보면 다음과 같이 script가 정의되어 있다.
#+CAPTION: npm run
#+NAME: npm run
#+attr_html: :width 600px
#+attr_latex: :width 100px
[[../static/img/nodejs/npm.png]] script를 실행하는 명령어가 npm
run이다. 여기에는 test라는 이름으로 script가 되어 있기 때문에 다음과
같이 실행한다.
#+BEGIN_SRC text
npm run test
#+END_SRC
에디터를 열고 다음을 추가해도 된다. 에디터를 사용하지 않는 방법도 있다.
#+BEGIN_SRC text
"start": "node index.js"
#+END_SRC
위와 같이 추가하고,
#+BEGIN_SRC text
npm run start
#+END_SRC
하면 된다.
* nvm
node도 python처럼 버전을 많이 탄다. 그래서 가상환경을 사용해야
한다. ruby에서 rvm이나 rbenv를 사용했던것과 동일하다. python의
pyvenv나 conda env와도 같다. 사용법은 단순하다.
** brew install nvm
brew로 nvm을 설치한다. 그리고
#+BEGIN_SRC text
  mkdir ~/.nvm
#+END_SRC
을 만들고 .zshrc에 다음을 추가한다.
#+BEGIN_SRC shell
 export NVM_DIR="$HOME/.nvm"
  [ -s "/usr/local/opt/nvm/nvm.sh" ] && \. "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
  [ -s "/usr/local/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/usr/local/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion
#+END_SRC
이것은 brew install nvm을 실행하면 설치하라고 나온다.
** nvm version
nvm의 version을 확인한다.
** nvm list
현재 설치된 node version들을 확인한다.
** nvm use
사용할 node를 선택한다.
** nvm install 8.0
node를 설치한다.
* node로 만들어진 project를 가져오면 해야할 것
가장 먼저 해야 할 것은 사용되는 node의 version에 맞춰 가상환경을
만드는 것이다. 그 다음, project에서 npm install로 package.json에서
기술된 의존성 package를 모두 설치한다.
